{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\FriendlyBanks\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Configuration de l'URL de base de l'API\nconst API_BASE_URL = 'http://172.30.240.1:8000/api';\nconst rolePermissions = {\n  President: ['manage_members', 'approve_loans', 'view_reports', 'manage_rules'],\n  Treasurer: ['manage_contributions', 'view_reports'],\n  Secretary: ['manage_meetings', 'view_reports'],\n  Censor: ['audit', 'view_reports'],\n  Member: ['make_contributions', 'request_loans', 'view_own_data'],\n  Guest: [],\n  Admin: ['manage_all']\n};\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Load user from localStorage if exists\n    const storedUser = localStorage.getItem('friendlybanks_user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // Call backend token endpoint\n      const response = await fetch(`${API_BASE_URL}/token/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        return false;\n      }\n      const data = await response.json();\n      const accessToken = data.access;\n      const refreshToken = data.refresh;\n\n      // Fetch user info using access token\n      const userResponse = await fetch(`${API_BASE_URL}/users/`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!userResponse.ok) {\n        return false;\n      }\n      const users = await userResponse.json();\n      // Find user info by username\n      const userInfo = users.find(u => u.username === username);\n      if (!userInfo) {\n        return false;\n      }\n      const loggedInUser = {\n        id: userInfo.id || userInfo.username,\n        // Utiliser l'ID du backend ou username comme fallback\n        username: userInfo.username,\n        role: userInfo.role.charAt(0).toUpperCase() + userInfo.role.slice(1),\n        // capitalize first letter\n        token: accessToken\n      };\n      localStorage.setItem('friendlybanks_user', JSON.stringify(loggedInUser));\n      localStorage.setItem('friendlybanks_refresh', refreshToken);\n      setUser(loggedInUser);\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('friendlybanks_user');\n  };\n  const hasPermission = permission => {\n    if (!user) return false;\n    if (user.role === 'Admin') return true;\n    const permissions = rolePermissions[user.role] || [];\n    return permissions.includes(permission);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      isAuthenticated: !!user,\n      hasPermission\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","rolePermissions","President","Treasurer","Secretary","Censor","Member","Guest","Admin","AuthContext","undefined","AuthProvider","children","_s","user","setUser","storedUser","localStorage","getItem","JSON","parse","login","username","password","response","fetch","method","headers","body","stringify","ok","data","json","accessToken","access","refreshToken","refresh","userResponse","users","userInfo","find","u","loggedInUser","id","role","charAt","toUpperCase","slice","token","setItem","error","console","logout","removeItem","hasPermission","permission","permissions","includes","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/Projects/FriendlyBanks/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\r\n\r\nexport type Role = 'President' | 'Treasurer' | 'Secretary' | 'Censor' | 'Member' | 'Guest' | 'Admin';\r\n\r\ninterface User {\r\n  id: string;        // Nouvelle propriété ajoutée\r\n  username: string;\r\n  role: Role;\r\n  token: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (username: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n  hasPermission: (permission: string) => boolean;\r\n}\r\n\r\n// Configuration de l'URL de base de l'API\r\nconst API_BASE_URL = 'http://172.30.240.1:8000/api';\r\n\r\nconst rolePermissions: Record<Role, string[]> = {\r\n  President: ['manage_members', 'approve_loans', 'view_reports', 'manage_rules'],\r\n  Treasurer: ['manage_contributions', 'view_reports'],\r\n  Secretary: ['manage_meetings', 'view_reports'],\r\n  Censor: ['audit', 'view_reports'],\r\n  Member: ['make_contributions', 'request_loans', 'view_own_data'],\r\n  Guest: [],\r\n  Admin: ['manage_all'],\r\n};\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Load user from localStorage if exists\r\n    const storedUser = localStorage.getItem('friendlybanks_user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      // Call backend token endpoint\r\n      const response = await fetch(`${API_BASE_URL}/token/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      if (!response.ok) {\r\n        return false;\r\n      }\r\n      const data = await response.json();\r\n      const accessToken = data.access;\r\n      const refreshToken = data.refresh;\r\n\r\n      // Fetch user info using access token\r\n      const userResponse = await fetch(`${API_BASE_URL}/users/`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n      if (!userResponse.ok) {\r\n        return false;\r\n      }\r\n      const users = await userResponse.json();\r\n      // Find user info by username\r\n      const userInfo = users.find((u: any) => u.username === username);\r\n      if (!userInfo) {\r\n        return false;\r\n      }\r\n\r\n      const loggedInUser: User = {\r\n        id: userInfo.id || userInfo.username, // Utiliser l'ID du backend ou username comme fallback\r\n        username: userInfo.username,\r\n        role: userInfo.role.charAt(0).toUpperCase() + userInfo.role.slice(1), // capitalize first letter\r\n        token: accessToken,\r\n      };\r\n\r\n      localStorage.setItem('friendlybanks_user', JSON.stringify(loggedInUser));\r\n      localStorage.setItem('friendlybanks_refresh', refreshToken);\r\n      setUser(loggedInUser);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('friendlybanks_user');\r\n  };\r\n\r\n  const hasPermission = (permission: string): boolean => {\r\n    if (!user) return false;\r\n    if (user.role === 'Admin') return true;\r\n    const permissions = rolePermissions[user.role] || [];\r\n    return permissions.includes(permission);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, isAuthenticated: !!user, hasPermission }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}